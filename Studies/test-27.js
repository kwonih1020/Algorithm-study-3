// 콜라츠 추측

// 문제 설명
  // 1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될 때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.

  // 1-1. 입력된 수가 짝수라면 2로 나눕니다. 
  // 1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다. 
  // 2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다. 
  // 예를 들어, 주어진 수가 6이라면 6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1 이 되어 총 8번 만에 1이 됩니다. 위 작업을 몇 번이나 반복해야 하는지 반환하는 함수, solution을 완성해 주세요. 단, 주어진 수가 1인 경우에는 0을, 작업을 500번 반복할 때까지 1이 되지 않는다면 –1을 반환해 주세요.

// 제한 사항
  // 입력된 수, num은 1 이상 8,000,000 미만인 정수입니다.

//  입출력   예
  //  n	  result
  //  6	    8
  //  16	  4
  // 626331	-1

// 입출력 예 설명
// 입출력 예 #1
  // 문제의 설명과 같습니다.

// 입출력 예 #2
  // 16 → 8 → 4 → 2 → 1 이 되어 총 4번 만에 1이 됩니다.

// 입출력 예 #3
  // 626331은 500번을 시도해도 1이 되지 못하므로 -1을 리턴해야 합니다.

// ※ 공지 - 2022년 6월 10일 다음과 같이 지문이 일부 수정되었습니다.
  // 주어진 수가 1인 경우에 대한 조건 추가


// solution.js
function solution(num) {
  let answer = 0;
  // num = 6;
  
  for(let i = 0; i < 500; i++) {
      if(num !== 1) { // 6 !== 1
          if(num % 2 === 0) { // 짝수인 경우
              // 6은 짝수이니까
              num /= 2; // /= 나누기 할당 , 오른쪽 피연산자의 값으로 변수를 나눈 결과를 다시 변수에 할당
              // num = 6 / 2 = 3, 3 이 num으로 할당
          } else { // 홀수인 경우 
              num = num * 3 + 1;
              // 3은 홀수이기 떄문에 num = 3 * 3 + 1 = 10, 그래서 num은 10이 되서 다시 짝수일때로 돌아감. 이런식으로 1이 될때까지 반복문 돌림.
          }
      } else {
          return answer = i;
          // num이 1일때 바로 i 즉 1을 반환
      }
  }
  return answer = -1; // 500까지 반복해서 1이 안되면 -1을 반환
}
